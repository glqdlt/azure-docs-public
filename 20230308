## REDIS SENTINEL

사내 인프라에는 방화벽 규정이 있다. 모든 포트는 닫아두고 사용하는 포트만 열어두는 정책이다. 한번은 REDIS 에 접속해서 PUB SUB 패턴을 사용해서 게임 서버와 의사소통을 하는 일이 필요해졌는 데, 해당 작업을 담당했던 동료가 방화벽을 어떻게 신청해야할지 모르겠다고 물어보더라. SENTINEL 포트와 REDIS 포트 두개를 다 방화벽 오픈 하면 된다고 했더니, SENTINEL 만 오픈하면 되는거 아니냐고 되물어왔다. 이에 대해서 제대로 된 답변을 못했는데, 관련해서 공부를 좀 했다.

너무 당연한 이야기인지 구글링 했을 때에 SENTINEL 과 클라이언트의 연결 메카니즘에 대해서는 딱히 안나오고, 죄다 SENTINEL 의 FAIL OVER 메카니즘에 대한 얘기만 나오더라.

결국 편법은 어려웠고, 정공으로 공식 문서(https://redis.io/docs/management/sentinel/)를 뒤져봤는데,
 SENTINEL 의 명령어 구성을 보다가 '어 아답팅 해주는 데 마스터 IP를 왜 알려주지?' 란 생각이 들더라.  ![](.20230308_images/bd24ae98.png)  
 
 그래서 이 커맨드를 사용을 언제하는 지를 찾아보면 되겠다 싶어서 문서를 좀 더 살펴봤다. 문서를 더 읽어나가다보니 문서 거의 끝자락에 CLIENT 구현 요구사항에 대한 문서(https://redis.io/docs/reference/sentinel-clients/)가 별첨되어있더라.
 
 ![](.20230308_images/afd11a1a.png)


### SENTINEL 에 클라이언트 접속 과정

센티넬 클라이언트 구현 요구사항 문서(https://redis.io/docs/reference/sentinel-clients/) 를 보고 궁금했던 점을 알게 되었다.

아래는 SENTINEL 에 접속하게 되는 클라이언트가 행하는 작업의 흐름이다.

1. 클라이언트가 SENTINEL 에 CONNECTION
2. 클라이언트가 SENTINEL 에 MASTER REDIS 의 IP 정보를 요구.
3. SENTINEL 은 MASTER REDIS IP 와 PORT 정보를 응답
4. 클라이언트는 MASTER REDIS 가 정상인지 확인
5. 클라이언트는 MASTER REDIS 에 CONNECTION

이렇다 보니 클라이언트 입장에서 SENTINEL 방화벽과 REDIS 방화벽을 모두 처리해야한다는 의미가 된다.  여기에서 의미하는 바는 REDIS 와 SENTINEL 을 보통 각각 3개씩 구성하게 되는데, 예를 들면 아래처럼

- SENTINEL a - REDIS a
- SENTINEL b - REDIS b
- SENTINEL c - REDIS c

6개의 물리 호스트에 대한 IP 와 포트 정보를 알아야하고, 방화벽 룰을 6개나 열어야 한다는 말이 된다.

### SENTINEL 과 REDIS 는 동일한 서버에 설치해야하는가?

기본적으로 다른 서버에 설치해야 한다. 이유는 아래와같다.

1. 클라이언트가 SENTINEL 에 CONNECTION
2. 클라이언트가 SENTINEL 에 MASTER REDIS 의 IP 정보를 요구.
3. SENTINEL 은 MASTER REDIS IP 와 PORT 정보를 응답
4. 클라이언트는 MASTER REDIS 가 정상인지 확인
5. 클라이언트는 MASTER REDIS 에 CONNECTION
6. 클라이언트와 MASTER REDIS 가 서로 쿵짝쿵짝
7. MASTER REDIS 사망
8. 클라이언트 커넥션 에러 발생
9. 클라이언트 SENTINEL 에 다시 재접속하여, 다른 MASTER REDIS 가 누구인지 질문
10. SENTINEL : 응답없음 (나도 죽었어)

이런 시나리오가 나올수 있기 때문이다.
 
